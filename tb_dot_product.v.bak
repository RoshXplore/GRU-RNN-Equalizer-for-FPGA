`timescale 1ns / 1ps

module tb_dot_product;

    parameter DATA_WIDTH = 32;
    parameter MAX_VECTOR_SIZE = 7;

    reg clk, rstn, start;
    wire done;
    reg [DATA_WIDTH*MAX_VECTOR_SIZE-1:0] vector_a_flat, vector_b_flat;
    reg [3:0] vector_length;
    wire [DATA_WIDTH-1:0] result;

    dot_product #(.DATA_WIDTH(DATA_WIDTH), .MAX_VECTOR_SIZE(MAX_VECTOR_SIZE)) uut (
        .clk(clk), .rstn(rstn), .start(start), .done(done),
        .vector_a_flat(vector_a_flat), .vector_b_flat(vector_b_flat),
        .vector_length(vector_length), .result(result)
    );

    // Clock and Reset
    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        rstn = 0; #20;
        rstn = 1; #10;
        run_tests();
        #100; $stop;
    end

    // Test execution task
    task run_tests;
        $display("----- Dot Product Test Started -----");
        
        // --- Test Case 1: Simple ---
        // A = [1.0, 2.0], B = [3.0, 4.0]
        // Expected: (1*3) + (2*4) = 3 + 8 = 11.0 (0x41300000)
        vector_a_flat = {{(MAX_VECTOR_SIZE-2){32'h0}}, 32'h40000000, 32'h3F800000}; // [2.0, 1.0]
        vector_b_flat = {{(MAX_VECTOR_SIZE-2){32'h0}}, 32'h40800000, 32'h40400000}; // [4.0, 3.0]
        run_single_test(2, 32'h41300000);

        // --- Test Case 2: Involving negatives ---
        // A = [2.0, -4.0, 3.0], B = [5.0, 1.0, 2.0]
        // Expected: (2*5) + (-4*1) + (3*2) = 10 - 4 + 6 = 12.0 (0x41400000)
        vector_a_flat = {{(MAX_VECTOR_SIZE-3){32'h0}}, 32'h40400000, 32'hC0800000, 32'h40000000}; // [3.0, -4.0, 2.0]
        vector_b_flat = {{(MAX_VECTOR_SIZE-3){32'h0}}, 32'h40000000, 32'h3F800000, 32'h40A00000}; // [2.0, 1.0, 5.0]
        run_single_test(3, 32'h41400000);

        $display("----- Dot Product Test Completed -----");
    endtask

    // Helper task to run a single test case
    task run_single_test(input [3:0] length, input [31:0] expected_result);
        begin
            @(posedge clk);
            vector_length = length;
            start = 1;

            @(posedge clk);
            start = 0;

            @(posedge done);

            #1; // Allow result to settle
            $display("Test (length=%0d): Result = %h (Expected = %h)", length, result, expected_result);
            if (result == expected_result) begin
                $display(">>> PASS <<<");
            end else begin
                $display(">>> FAIL <<<");
            end
        end
    endtask

endmodule